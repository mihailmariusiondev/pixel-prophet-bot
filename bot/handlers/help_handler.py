from telegram import Update
from telegram.ext import ContextTypes
import logging
from ..utils.decorators import require_configured
from ..services.prompt_styles.manager import style_manager
from ..services.replicate_service import ReplicateService
from ..handlers.config_handler import ALLOWED_PARAMS


@require_configured
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handle the /help command.
    Shows comprehensive usage information, commands, configurations, and features.
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    logging.info(f"Help command received - User: {user_id} ({username})")

    messages = []

    # 1. Introduction and Basic Commands
    messages.append(
        "ü§ñ *PixelProphetBot - Gu√≠a Completa*\n\n"
        "*Comandos Principales:*\n"
        "‚Ä¢ /start - Inicia el bot y configura los par√°metros esenciales\n"
        "‚Ä¢ /help - Muestra esta gu√≠a detallada\n"
        "‚Ä¢ /about - Informaci√≥n sobre el bot y su creador\n"
        "‚Ä¢ /config - Ver o modificar la configuraci√≥n\n"
        "‚Ä¢ /generate - Genera im√°genes (m√∫ltiples formatos)\n"
    )

    # 2.1 Valid and Invalid Command Combinations
    messages.append(
        "‚ö° *Combinaciones del Comando /generate:*\n\n"
        "*Combinaciones V√°lidas:*\n"
        "‚Ä¢ `/generate 3` - Genera 3 im√°genes con estilo por defecto\n"
        "‚Ä¢ `/generate 5 un retrato en la playa` - Genera 5 im√°genes con prompt directo\n"
        "‚Ä¢ `/generate styles=cinematic` - Una imagen con estilo cinematogr√°fico\n"
        "‚Ä¢ `/generate 4 styles=urban,vintage` - 4 im√°genes combinando estilos\n"
        "‚Ä¢ `/generate styles=random` - Una imagen con estilo aleatorio\n"
        "‚Ä¢ `/generate 1 styles=random,random` - Dos im√°genes con estilos aleatorios diferentes\n"
        "‚Ä¢ `/generate 2 styles=professional,casual,cinematic,urban,minimalist,vintage,influencer,socialads,datingprofile` - 2 im√°genes por cada estilo\n"
        "‚Ä¢ `/generate styles=professional` - Una imagen con estilo profesional\n"
        "‚Ä¢ `/generate 10 styles=urban,cinematic` - 20 im√°genes (10 de cada estilo)\n"
        "‚Ä¢ `/generate 3 styles=minimalist,vintage,urban` - 9 im√°genes (3 de cada estilo)\n"
        "‚Ä¢ `/generate 1 retrato profesional en oficina` - Una imagen con prompt directo\n\n"
        "*Combinaciones Inv√°lidas:*\n"
        "‚Ä¢ `/generate styles=urban un retrato` ‚ùå - No mezclar styles con prompt\n"
        "‚Ä¢ `/generate 51` ‚ùå - M√°ximo 50 im√°genes\n"
        "‚Ä¢ `/generate 0` ‚ùå - M√≠nimo 1 imagen\n"
        "‚Ä¢ `/generate styles=invalid` ‚ùå - Estilo no existente\n"
        "‚Ä¢ `/generate styles=urban,` ‚ùå - Coma al final\n"
        "‚Ä¢ `/generate styles=` ‚ùå - Styles vac√≠o\n"
        "‚Ä¢ `/generate styles` ‚ùå - Falta el = despu√©s de styles\n"
        "‚Ä¢ `/generate ,styles=urban` ‚ùå - Coma al inicio\n"
        "‚Ä¢ `/generate styles=urban,,vintage` ‚ùå - Comas dobles\n"
        "‚Ä¢ `/generate styles=urban vintage` ‚ùå - Espacios en lugar de comas\n"
        "‚Ä¢ `/generate -1` ‚ùå - N√∫mero negativo\n"
        "‚Ä¢ `/generate 2.5` ‚ùå - N√∫mero decimal\n"
        "‚Ä¢ `/generate` ‚ùå - Comando sin par√°metros\n"
        "‚Ä¢ `/generate styles=URBAN,vintage` ‚ùå - Mezcla de may√∫sculas y min√∫sculas\n\n"
        "üí° *Tips:*\n"
        "‚Ä¢ Los estilos inv√°lidos en una lista se ignoran\n"
        "‚Ä¢ El orden de los estilos no afecta el resultado\n"
        "‚Ä¢ Puedes usar may√∫sculas o min√∫sculas en los estilos\n"
        "‚Ä¢ Usar todos los estilos generar√° 9 veces el n√∫mero especificado de im√°genes\n"
        "‚Ä¢ El estilo random puede repetirse para obtener diferentes estilos aleatorios\n"
        "‚Ä¢ El n√∫mero total de im√°genes es el producto del n√∫mero √ó cantidad de estilos\n"
        "‚Ä¢ Si no especificas n√∫mero con styles=, se genera una imagen por estilo"
    )

    # 2. Generate Command Formats
    messages.append(
        "üé® *Formatos del Comando /generate:*\n\n"
        "*1. Generaci√≥n Simple:*\n"
        "‚Ä¢ `/generate [n√∫mero] [prompt]`\n"
        "Ejemplo: `/generate 4 retrato en un caf√©`\n\n"
        "*2. Generaci√≥n con Estilos:*\n"
        "‚Ä¢ `/generate [n√∫mero] styles=estilo1,estilo2`\n"
        "Ejemplo: `/generate 3 styles=cinematic,urban`\n\n"
        "*3. Generaci√≥n con Estilo por Defecto:*\n"
        "‚Ä¢ `/generate [n√∫mero]`\n"
        "Ejemplo: `/generate 5`\n\n"
        "*4. Generaci√≥n con Estilo √önico:*\n"
        "‚Ä¢ `/generate styles=estilo`\n"
        "Ejemplo: `/generate styles=vintage`\n\n"
        "üí° El n√∫mero m√°ximo de im√°genes por comando es 50"
    )

    # 3. Available Styles with Descriptions
    messages.append(
        "üé≠ *Estilos Disponibles:*\n\n"
        "‚Ä¢ *professional* - Formal y elegante, ideal para retratos profesionales\n"
        "‚Ä¢ *casual* - Estilo natural y aut√©ntico tipo smartphone\n"
        "‚Ä¢ *cinematic* - Dram√°tico y cinematogr√°fico, como escenas de pel√≠cula\n"
        "‚Ä¢ *urban* - Fotograf√≠a urbana y callejera con energ√≠a citadina\n"
        "‚Ä¢ *minimalist* - Limpio y minimalista con elegante simplicidad\n"
        "‚Ä¢ *vintage* - Cl√°sico y retro con efectos de √©poca\n"
        "‚Ä¢ *influencer* - Moderno y trendy para redes sociales\n"
        "‚Ä¢ *socialads* - Optimizado para anuncios en redes sociales\n"
        "‚Ä¢ *datingprofile* - Ideal para fotos de perfil en apps de citas\n"
        "‚Ä¢ *random* - Selecciona un estilo al azar\n\n"
        "üí° Puedes combinar m√∫ltiples estilos usando comas"
    )

    # 4. Configuration Parameters
    config_text = "*‚öôÔ∏è Par√°metros de Configuraci√≥n:*\n\n"
    for param, details in ALLOWED_PARAMS.items():
        config_text += f"‚Ä¢ *{param}*\n"
        config_text += f"  - {details['description']}\n"
        if "allowed_values" in details:
            config_text += (
                f"  - Valores permitidos: {', '.join(details['allowed_values'])}\n"
            )
        elif details["type"] in ["int", "float"]:
            config_text += f"  - Rango: {details['min']} a {details['max']}\n"
        config_text += "\n"
    messages.append(config_text)

    # 5. Image Analysis Feature
    messages.append(
        "üì∏ *An√°lisis de Im√°genes:*\n\n"
        "Env√≠a una imagen al bot para:\n"
        "1. Recibir un an√°lisis detallado de la imagen\n"
        "2. Generar una imagen similar basada en el an√°lisis\n"
        "3. Mantener el estilo y elementos clave de la imagen original\n\n"
        "üí° Las im√°genes generadas respetar√°n tu configuraci√≥n actual"
    )

    # 6. Configuration Instructions
    messages.append(
        "üîß *Uso de la Configuraci√≥n:*\n\n"
        "*Ver configuraci√≥n actual:*\n"
        "‚Ä¢ `/config`\n\n"
        "*Modificar un par√°metro:*\n"
        "‚Ä¢ `/config [par√°metro] [valor]`\n\n"
        "Ejemplos:\n"
        "‚Ä¢ `/config gender male`\n"
        "‚Ä¢ `/config trigger_word MARIUS`\n"
        "‚Ä¢ `/config guidance_scale 7.5`\n\n"
        "üí° Algunos par√°metros son obligatorios para usar el bot"
    )

    # 7. Important Notes and Tips (updated)
    messages.append(
        "üìù *Notas Importantes:*\n\n"
        "‚Ä¢ El trigger_word se a√±ade autom√°ticamente a todos los prompts\n"
        "‚Ä¢ Las im√°genes generadas tienen una relaci√≥n de aspecto 4:5\n"
        "‚Ä¢ Los rostros siempre son visibles pero no miran directamente a la c√°mara\n"
        "‚Ä¢ La calidad de la imagen depende del num_inference_steps\n"
        "‚Ä¢ El guidance_scale controla qu√© tan cerca sigue el prompt\n"
        "‚Ä¢ El prompt_strength balancea entre el prompt y la imagen original\n"
        "‚Ä¢ Total de im√°genes = n√∫mero √ó cantidad de estilos seleccionados\n\n"
        "‚ö†Ô∏è *Restricciones:*\n"
        "‚Ä¢ No se permiten escenarios sin camisa o estados de desnudez\n"
        "‚Ä¢ No se especifica edad en los prompts\n"
        "‚Ä¢ Se evitan contextos deportivos y de gimnasio\n"
        "‚Ä¢ No se permiten movimientos (caminar, cruzar, etc.)\n"
        "‚Ä¢ Los prompts son puramente descriptivos, sin t√≠tulos"
    )

    # Send each section as a separate message with better error handling
    for i, message in enumerate(messages, 1):
        try:
            await update.message.reply_text(
                message, parse_mode="Markdown", disable_web_page_preview=True
            )
        except Exception as e:
            logging.error(f"Error sending help message section {i}: {str(e)}")
            # Only send error message if it's the first failed message
            if i == 1:
                await update.message.reply_text(
                    "‚ùå Error al mostrar la ayuda. Por favor, intenta de nuevo m√°s tarde o contacta al administrador."
                )
            # Continue sending remaining messages even if one fails
            continue
