from telegram import Update
from telegram.ext import ContextTypes
import logging


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"Help command received from user {user_id}")

    help_text = (
        "*ü§ñ Gu√≠a de PixelProphetBot*\n\n"
        "*Comandos principales:*\n"
        "`/generate` \\- Genera una imagen a partir de tu descripci√≥n\n"
        "`/variations` \\- Genera 3 variaciones de una imagen\n"
        "`/last_generation` \\- Muestra tu √∫ltima generaci√≥n\n\n"
        "*Configuraci√≥n:*\n"
        "`/config` \\- Ver tu configuraci√≥n actual\n"
        "`/config <param> <valor>` \\- Modifica un par√°metro\n\n"
        "*Otros comandos:*\n"
        "`/start` \\- Inicia el bot\n"
        "`/about` \\- Informaci√≥n sobre el bot\n"
        "`/help` \\- Muestra este mensaje\n\n"
        "*üìù Ejemplos:*\n"
        "‚Ä¢ `/generate un gato jugando ajedrez en la luna`\n"
        "‚Ä¢ `/variations abc123` \\(usando el ID de una generaci√≥n\\)\n"
        "‚Ä¢ `/config seed 42`\n\n"
        "*üí° Tips:*\n"
        "‚Ä¢ Puedes copiar el ID de cualquier generaci√≥n para usar con variations\n"
        "‚Ä¢ Si usas variations sin ID, se usar√° tu √∫ltima generaci√≥n\n"
        "‚Ä¢ Usa config para personalizar los par√°metros de generaci√≥n"
    )

    try:
        await update.message.reply_text(help_text, parse_mode="MarkdownV2")
        logging.debug(f"Help message sent to user {user_id}")
    except Exception as e:
        logging.error(
            f"Error sending help message to user {user_id}: {e}", exc_info=True
        )
