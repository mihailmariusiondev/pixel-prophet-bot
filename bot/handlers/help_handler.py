from telegram import Update
from telegram.ext import ContextTypes
import logging
from ..utils.decorators import require_configured
from ..services.prompt_styles.manager import style_manager
from ..services.replicate_service import ReplicateService
from ..handlers.config_handler import ALLOWED_PARAMS


@require_configured
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handle the /help command.
    Shows detailed information about bot usage and available commands.
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    logging.info(f"Help command received - User: {user_id} ({username})")

    # Main commands section
    commands_help = (
        "ü§ñ *Comandos disponibles:*\n\n"
        "‚Ä¢ `/generate [n√∫mero] [prompt]` - Genera m√∫ltiples im√°genes del mismo prompt\n"
        "‚Ä¢ `/generate [n√∫mero]` - Genera im√°genes con estilo aleatorio\n"
        "‚Ä¢ `/generate [n√∫mero] styles=estilo1,estilo2` - Combina estilos para generaci√≥n\n"
        "‚Ä¢ `/generate styles=estilo` - Genera con estilo espec√≠fico sin n√∫mero\n"
        "‚Ä¢ `/generate [n√∫mero] [prompt]` - Genera m√∫ltiples variaciones de un prompt\n"
        "‚Ä¢ `/generate [prompt] styles=estilo` - Combina prompt con estilo espec√≠fico\n\n"
    )

    # Configuration parameters section
    config_help = "‚öôÔ∏è *Par√°metros de configuraci√≥n:*\n\n"
    for param, details in ALLOWED_PARAMS.items():
        config_help += f"‚Ä¢ `{param}`: {details['description']}\n"
        if details["type"] == "str" and "allowed_values" in details:
            config_help += (
                f"  Valores permitidos: {', '.join(details['allowed_values'])}\n"
            )
        elif details["type"] == "str":
            config_help += f"  Longitud: {details['min_length']}-{details['max_length']} caracteres\n"
        else:
            config_help += f"  Rango: {details['min']}-{details['max']}\n"
        config_help += "\n"

    # Styles section
    available_styles = style_manager.get_available_styles()
    styles_help = (
        "üé® *Uso de estilos:*\n\n"
        "‚Ä¢ El n√∫mero especificado se aplica a CADA estilo\n"
        "‚Ä¢ Total de im√°genes = n√∫mero √ó cantidad de estilos\n"
        "‚Ä¢ M√°ximo 3 estilos por comando\n"
        "‚Ä¢ Estilos inv√°lidos son ignorados\n"
        "‚Ä¢ Usa `random` para selecci√≥n aleatoria de estilo\n"
        "‚Ä¢ Los nombres de estilos son insensibles a may√∫sculas\n\n"
    )

    # Examples section
    examples = (
        "üìù *Ejemplos avanzados:*\n\n"
        "1. Un estilo con m√∫ltiples im√°genes:\n"
        "`/generate 3 styles=professional` ‚Üí 3 im√°genes\n\n"
        "2. Dos estilos con im√°genes por estilo:\n"
        "`/generate 2 styles=cinematic,vintage` ‚Üí 4 im√°genes (2 de cada)\n\n"
        "3. Tres estilos con una imagen cada uno:\n"
        "`/generate 1 styles=urban,minimalist,influencer` ‚Üí 3 im√°genes\n\n"
        "4. Generaci√≥n m√∫ltiple con prompt directo:\n"
        "`/generate 4 retrato en un caf√© iluminado` ‚Üí 4 im√°genes iguales\n\n"
    )

    # Tips section
    tips = (
        "üí° *Tips:*\n\n"
        "‚Ä¢ Los prompts deben ser detallados y descriptivos\n"
        "‚Ä¢ Especifica siempre la direcci√≥n de la mirada del sujeto\n"
        "‚Ä¢ Evita movimiento o poses din√°micas\n"
        "‚Ä¢ No especifiques edad ni caracter√≠sticas f√≠sicas espec√≠ficas\n"
        "‚Ä¢ Puedes combinar m√∫ltiples estilos en una sola generaci√≥n\n"
    )

    # Edge cases section
    edge_cases = (
        "‚ö†Ô∏è *Casos especiales:*\n\n"
        "‚Ä¢ May√∫sculas: `styles=PROFESSIONAL` se convierte a min√∫scula\n"
        "‚Ä¢ Estilos inv√°lidos: se ignoran silenciosamente\n"
        "‚Ä¢ N√∫meros mayores a 50: se limitan autom√°ticamente\n"
        "‚Ä¢ Mezcla de formatos: `/generate 3 prompt styles=estilo` es inv√°lido\n"
        "‚Ä¢ Sin espacios: `styles= estilo` puede causar errores\n"
    )

    # Combine all sections
    full_help = f"{commands_help}{config_help}{styles_help}{examples}{tips}{edge_cases}"

    # Send help message
    await update.message.reply_text(
        full_help, parse_mode="Markdown", disable_web_page_preview=True
    )
