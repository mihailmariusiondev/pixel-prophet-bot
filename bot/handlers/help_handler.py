from telegram import Update
from telegram.ext import ContextTypes
import logging


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Provides comprehensive help information about bot commands and features.
    Organizes help content into sections for better readability.

    Args:
        update: Telegram update object
        context: Bot context
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    chat_id = update.effective_chat.id
    logging.info(f"Help command received from user {user_id} ({username}) in chat {chat_id}")

    try:
        logging.debug(f"Preparing help sections for user {user_id}")
        # Structure help text into sections
        help_sections = {
            "main_commands": (
                "*Comandos principales:*\n"
                "`/generate` \\- Genera una imagen a partir de tu descripci√≥n\n"
                "`/fashion` \\- Genera 3 im√°genes de moda masculina\n"
                "`/variations` \\- Genera 3 variaciones de una imagen\n"
                "`/last_generation` \\- Muestra tu √∫ltima generaci√≥n\n"
            ),
            "other_features": (
                "*Otras funciones:*\n"
                "‚Ä¢ Env√≠a una imagen para analizarla y generar una similar\n"
            ),
            "configuration": (
                "*Configuraci√≥n:*\n"
                "`/config` \\- Ver tu configuraci√≥n actual\n"
                "`/config <param> <valor>` \\- Modifica un par√°metro\n"
            ),
            "basic_commands": (
                "*Otros comandos:*\n"
                "`/start` \\- Inicia el bot\n"
                "`/about` \\- Informaci√≥n sobre el bot\n"
                "`/help` \\- Muestra este mensaje\n"
            ),
            "examples": (
                "*üìù Ejemplos:*\n"
                "‚Ä¢ `/generate un gato jugando ajedrez en la luna`\n"
                "‚Ä¢ `/variations abc123` \\(usando el ID de una generaci√≥n\\)\n"
                "‚Ä¢ `/config seed 42`\n"
            ),
            "tips": (
                "*üí° Tips:*\n"
                "‚Ä¢ Puedes copiar el ID de cualquier generaci√≥n para usar con variations\n"
                "‚Ä¢ Si usas variations sin ID, se usar√° tu √∫ltima generaci√≥n\n"
                "‚Ä¢ Usa config para personalizar los par√°metros de generaci√≥n\n"
                "‚Ä¢ El comando fashion genera 3 im√°genes de moda masculina autom√°ticamente"
            )
        }

        # Combine all sections
        help_text = "\n\n".join([
            "*ü§ñ Gu√≠a de PixelProphetBot*\n",
            help_sections["main_commands"],
            help_sections["other_features"],
            help_sections["configuration"],
            help_sections["basic_commands"],
            help_sections["examples"],
            help_sections["tips"]
        ])

        logging.debug(f"Sending help message to user {user_id}")
        await update.message.reply_text(help_text, parse_mode="MarkdownV2")
        logging.info(f"Help message successfully sent to user {user_id}")

    except Exception as e:
        logging.error(
            f"Error sending help message to user {user_id} in chat {chat_id}: {str(e)}",
            exc_info=True
        )
        await update.message.reply_text(
            "‚ùå Error al mostrar la ayuda. Por favor, intenta nuevamente."
        )
