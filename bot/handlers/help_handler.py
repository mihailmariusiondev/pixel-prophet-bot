from telegram import Update
from telegram.ext import ContextTypes
import logging
from ..utils.decorators import require_configured
from ..services.prompt_styles.manager import style_manager
from ..services.replicate_service import ReplicateService
from ..handlers.config_handler import ALLOWED_PARAMS


@require_configured
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handle the /help command.
    Shows detailed usage information, commands, and configuration options.
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    logging.info(f"Help command received - User: {user_id} ({username})")

    # Dividir el mensaje en partes m√°s peque√±as para evitar problemas con el formato
    messages = []

    # Comandos principales
    messages.append(
        "ü§ñ *Comandos Principales:*\n"
        "‚Ä¢ /start - Inicia el bot y muestra mensaje de bienvenida\n"
        "‚Ä¢ /help - Muestra este mensaje de ayuda\n"
        "‚Ä¢ /about - Informaci√≥n sobre el bot y su creador\n"
        "‚Ä¢ /config - Ver o modificar la configuraci√≥n\n"
        "‚Ä¢ /generate - Genera im√°genes (ver formatos abajo)\n"
    )

    # Formatos de generaci√≥n
    messages.append(
        "üì∏ *Formatos de /generate:*\n\n"
        "*1. Prompt Directo:*\n"
        "‚Ä¢ /generate [n√∫mero] [prompt]\n"
        "Ejemplo: /generate 4 retrato en un caf√©\n\n"
        "*2. Estilos Espec√≠ficos:*\n"
        "‚Ä¢ /generate [n√∫mero] styles=estilo1,estilo2\n"
        "Ejemplo: /generate 3 styles=cinematic,urban\n\n"
        "*3. Estilo por Defecto:*\n"
        "‚Ä¢ /generate [n√∫mero]\n"
        "Ejemplo: /generate 5\n\n"
        "*4. Un Solo Estilo:*\n"
        "‚Ä¢ /generate styles=estilo\n"
        "Ejemplo: /generate styles=vintage"
    )

    # Estilos disponibles
    messages.append(
        "üé® *Estilos Disponibles:*\n"
        "‚Ä¢ professional - Formal y elegante\n"
        "‚Ä¢ casual - Estilo casual y aut√©ntico\n"
        "‚Ä¢ cinematic - Estilo cinematogr√°fico\n"
        "‚Ä¢ urban - Fotograf√≠a urbana\n"
        "‚Ä¢ minimalist - Minimalista y limpio\n"
        "‚Ä¢ vintage - Cl√°sico y retro\n"
        "‚Ä¢ influencer - Estilo redes sociales\n"
        "‚Ä¢ socialads - Anuncios sociales\n"
        "‚Ä¢ datingprofile - Perfil de citas\n"
        "‚Ä¢ random - Estilo aleatorio"
    )

    # Configuraci√≥n
    messages.append(
        "‚öôÔ∏è *Configuraci√≥n:*\n"
        "‚Ä¢ Ver configuraci√≥n actual: /config\n"
        "‚Ä¢ Modificar par√°metro: /config [par√°metro] [valor]\n\n"
        "*Par√°metros Principales:*\n"
        "‚Ä¢ trigger_word - Palabra clave para prompts\n"
        "‚Ä¢ model_endpoint - Endpoint del modelo\n"
        "‚Ä¢ gender - G√©nero (male/female)\n"
        "‚Ä¢ guidance_scale - Control de prompt (0-10)\n"
        "‚Ä¢ prompt_strength - Balance prompt/imagen (0-1)\n"
        "‚Ä¢ num_inference_steps - Calidad/velocidad (1-50)"
    )

    # Notas importantes
    messages.append(
        "üí° *Notas Importantes:*\n"
        "‚Ä¢ M√°ximo 50 im√°genes por comando\n"
        "‚Ä¢ Total im√°genes = n√∫mero √ó estilos seleccionados\n"
        "‚Ä¢ No mezclar prompt directo con styles=\n"
        "‚Ä¢ Configurar trigger_word y model_endpoint antes de usar\n"
        "‚Ä¢ Los estilos inv√°lidos se ignoran\n"
        "‚Ä¢ El trigger_word se a√±ade autom√°ticamente"
    )

    # Enviar cada secci√≥n como un mensaje separado
    for message in messages:
        try:
            await update.message.reply_text(
                message, parse_mode="Markdown", disable_web_page_preview=True
            )
        except Exception as e:
            logging.error(f"Error sending help message: {str(e)}")
            await update.message.reply_text(
                "‚ùå Error al mostrar la ayuda. Por favor, contacta al administrador."
            )
            break
