from telegram import Update
from telegram.ext import ContextTypes
import logging
from ..utils.decorators import require_configured
from ..services.prompt_styles.manager import style_manager
from ..services.replicate_service import ReplicateService
from ..handlers.config_handler import ALLOWED_PARAMS


@require_configured
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handle the /help command.
    Shows simplified usage information and commands.
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    logging.info(f"Help command received - User: {user_id} ({username})")

    # Main commands section
    commands_help = (
        "ü§ñ *Formatos v√°lidos:*\n\n"
        "‚Ä¢ `/generate [n√∫mero] [prompt]`\n"
        "  Ej: `/generate 4 retrato en un caf√© iluminado`\n\n"
        "‚Ä¢ `/generate [n√∫mero] styles=estilo1,estilo2`\n"
        "  Ej: `/generate 3 styles=cinematic,professional`\n\n"
        "‚Ä¢ `/generate [n√∫mero]` (estilo aleatorio)\n"
        "  Ej: `/generate 5`\n\n"
        "‚Ä¢ `/generate styles=estilo` (1 imagen)\n"
        "  Ej: `/generate styles=urban`\n\n"
    )

    # Styles section
    styles_help = (
        "üé® *Estilos disponibles:*\n"
        "`professional, casual, cinematic, urban, minimalist, vintage, influencer, socialads`\n\n"
        "‚Ä¢ Separa con comas los estilos que quieras usar\n"
        "‚Ä¢ Total im√°genes = n√∫mero √ó estilos v√°lidos\n"
        "‚Ä¢ `random` selecciona estilo aleatorio\n\n"
    )

    # Parameters section
    params_help = (
        "‚öôÔ∏è *Par√°metros clave:*\n"
        "‚Ä¢ `trigger_word`: Palabra clave para prompts\n"
        "‚Ä¢ `model_endpoint`: Endpoint del modelo\n"
        "‚Ä¢ `gender`: G√©nero para generaci√≥n (male/female)\n\n"
    )

    # Important notes
    important_notes = (
        "üí° *Notas importantes:*\n"
        "‚Ä¢ M√°ximo 50 im√°genes por comando\n"
        "‚Ä¢ N√∫meros mayores a 50 se limitan autom√°ticamente\n"
        "‚Ä¢ Estilos inv√°lidos se ignoran\n"
        "‚Ä¢ Usa solo comas para separar estilos\n"
        "‚Ä¢ El orden de los par√°metros es importante\n"
    )

    full_help = f"{commands_help}{styles_help}{params_help}{important_notes}"

    await update.message.reply_text(
        full_help, parse_mode="Markdown", disable_web_page_preview=True
    )
